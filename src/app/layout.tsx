import type { Metadata } from 'next'
import './globals.css'
import { inter } from './ui/fonts'
import { GLOBAL_QUERY } from '@/lib/utils/queries'
import Sidebar from '@/components/Sidebar'
import { Navbar } from '@/components/Navbar'

export const metadata: Metadata = {
	title: 'Create Next App',
	description: 'Generated by create next app',
}

export default async function RootLayout({
	children,
}: Readonly<{
	children: React.ReactNode
}>) {
	let data = null

	if (!process.env.NEXT_PUBLIC_BASE_URL) {
		console.error('NEXT_PUBLIC_BASE_URL is not defined')
		return (
			<div>
				<h1>Error</h1>
				<p>Server configuration error. Please contact the administrator.</p>
			</div>
		)
	}

	try {
		const response = await fetch(
			`${process.env.NEXT_PUBLIC_BASE_URL}/api/graphql`,
			{
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
					// Uncomment if authentication is needed:
					// 'Authorization': `Bearer ${process.env.API_TOKEN}`,
				},
				body: JSON.stringify({
					query: GLOBAL_QUERY,
				}),
				// Optional: Disable caching for fresh data
				// cache: 'no-store',
				// Or use revalidation for ISR
				// next: { revalidate: 60 }, // Revalidate every 60 seconds
			}
		)

		if (!response.ok) {
			throw new Error(`HTTP error! Status: ${response.status}`)
		}

		const result = await response.json()

		if (result.errors) {
			throw new Error(`GraphQL error: ${JSON.stringify(result.errors)}`)
		}

		data = result.data
	} catch (error) {
		console.error('Error fetching GraphQL data:', error)
		return (
			<div>
				<h1>Error</h1>
				<p>Failed to load pages. Please try again later.</p>
			</div>
		)
	}

	return (
		<html lang='en'>
			<body className={`${inter.className} antialiased`}>
				{data?.Sidebar && <Sidebar {...data.Sidebar} />}
				<div className='ml-[63px] overflow-hidden min-h-screen'>
					{data?.Header && <Navbar {...data.Header} />}
					{!data && (
						<div className='text-red-600'>Error fetching GraphQL data</div>
					)}
					{children}
				</div>
			</body>
		</html>
	)
}
